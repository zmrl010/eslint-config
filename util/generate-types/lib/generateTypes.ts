import type { TSESLint } from '@typescript-eslint/utils';
import fs from 'fs';
import path from 'path';
import { AUTO_GENERATED_NOTE } from './autoGeneratedNote.js';
import { convertRuleOptionsToTypescriptTypes } from './convertRuleOptionsToTypes.js';
import { createDocComment, createRuleDocComment } from './docComment.js';
import { formatText, toPascalCase } from './format.js';
import { getAllPlugins, type Plugin } from './getPlugins.js';

/**
 * normalize function rule into object
 */
function normalizeRule(
  ruleCreator: TSESLint.RuleCreateFunction
): TSESLint.RuleModule<string, unknown[]> {
  return {
    defaultOptions: [],
    meta: {
      messages: {},
      schema: {},
      type: 'suggestion',
    },
    create: ruleCreator,
  };
}

export async function generateTypes(): Promise<void> {
  const plugins = getAllPlugins();

  for await (const plugin of plugins) {
    if (!plugin.rules) {
      continue;
    }

    const rules: Plugin['rules'] = {};
    for (const [ruleName, rule] of Object.entries(plugin.rules)) {
      if (typeof rule === 'function') {
        rules[ruleName] = normalizeRule(rule);
      } else if (rule.meta.deprecated === true) {
        // filter deprecated rules
        continue;
      } else {
        rules[ruleName] = rule;
      }
    }

    await convertRuleOptionsToTypescriptTypes({
      ...plugin,
      rules,
    });

    const ruleNames = Object.keys(rules).map((rule) => ({
      name: rule,
      safeName: toPascalCase(rule.replace(`${plugin.shortName}/`, '')),
    }));
    const interfaceName = toPascalCase(plugin.shortName);

    const rulePrefix =
      plugin.shortName === 'eslint' ? '' : `${plugin.shortName}/`;

    const typeImports = ruleNames.map(
      (rule) =>
        `import type { ${rule.safeName} } from '../${plugin.shortName}/${rule.name}.js'`
    );

    const interfaceMembers = ruleNames.map((rule) => {
      const comment = createRuleDocComment(rules[rule.name]);
      return `${comment}\n'${rulePrefix}${rule.name}': ${rule.safeName};`;
    });

    const typesFile = [
      AUTO_GENERATED_NOTE,
      '',
      ...typeImports,
      '',
      createDocComment(`\`${plugin.name}\` Rules`),
      `export interface ${interfaceName} {`,
      ...interfaceMembers,
      '}',
    ].join('\n');

    const formatted = formatText(typesFile);

    fs.writeFileSync(
      path.resolve(process.cwd(), `src/types/${plugin.shortName}/index.ts`),
      formatted,
      'utf8'
    );

    console.info('Wrote types for', plugin.name, '\n');
  }

  console.info('Done!');
}
