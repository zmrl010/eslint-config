import type { JSONSchema } from '@typescript-eslint/utils';
import { compile } from 'json-schema-to-typescript';
import mkdirp from 'mkdirp';
import path from 'path';
import { AUTO_GENERATED_NOTE } from './autoGeneratedNote.js';
import { GeneratorConfig } from './config.js';
import { createRuleDoc } from './doc.js';
import { formatText, prettierConfig, toPascalCase } from './format.js';
import { type Plugin } from './getPlugins.js';

type Definition = {
  defs: string;
  typeExport: string;
};

async function compileSchema(
  typeName: string,
  schema: JSONSchema.JSONSchema4,
  index: number = 0
): Promise<Definition> {
  const code = await compile(schema, `${typeName}${index}`, {
    bannerComment: '',
    style: prettierConfig,
  });

  return {
    defs: code.replace(/export /gu, ''),
    typeExport: `export type ${typeName} = 'off' | ${typeName}${index}`,
  };
}

const ruleLevelString = {
  enum: ['off', 'error', 'warn'],
};
function adjustSchema(schema: JSONSchema.JSONSchema4): JSONSchema.JSONSchema4 {
  if (schema.anyOf != null) {
    schema.anyOf.forEach((s) => {
      adjustSchema(s);
    });

    return schema;
  }

  if (Array.isArray(schema.prefixItems)) {
    // some rules use prefixItems instead of items. we can treat them as items
    schema.items = schema.prefixItems;
  }

  if (Array.isArray(schema.items)) {
    // work around shared / nested schemas
    if (schema.items[0] !== ruleLevelString) {
      schema.items.unshift(ruleLevelString);
    }
  } else if (schema.items !== undefined) {
    if (schema.items.oneOf != null || schema.items.anyOf != null) {
      const oldItem = schema.items;
      schema.items = [ruleLevelString];
      schema.additionalItems = oldItem;
    } else {
      schema.items = [ruleLevelString, schema.items];
    }
  } else {
    schema = {
      type: 'array',
      items: [ruleLevelString, schema],
    };
  }

  if (typeof schema.minItems === 'number') {
    schema.minItems += 1;
  } else {
    schema.minItems = 1;
  }

  if (typeof schema.maxItems === 'number') {
    schema.maxItems += 1;
  }

  return schema;
}

function recursivelyFixRefs(
  schema: JSONSchema.JSONSchema4 | string | null | boolean,
  idx: number
): void {
  if (schema == null || typeof schema !== 'object') {
    return;
  }

  let key: keyof JSONSchema.JSONSchema4;
  for (key in schema) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- known safe
    const current = schema[key];
    if (current == null) {
      continue;
    }

    if (Array.isArray(current)) {
      for (const subSchema of current) {
        recursivelyFixRefs(subSchema, idx);
      }
    } else if (
      key === '$ref' &&
      typeof current === 'string' &&
      current.startsWith('#/')
    ) {
      schema[key] = `#/items/${idx + 1}/${current.substring(2)}`;
    } else if (typeof current === 'object') {
      recursivelyFixRefs(current, idx);
    }
  }
}

export async function convertRuleOptionsToTypes(
  config: GeneratorConfig,
  plugin: Plugin
): Promise<void> {
  const { shortName: pluginName, rules } = plugin;
  const folderName = path.resolve(config.target, pluginName);
  await mkdirp(folderName);

  await Promise.all(
    Object.entries(rules).map(async ([ruleName, rule]) => {
      if (ruleName === 'default' && pluginName !== 'import') {
        return;
      }

      const typeName = toPascalCase(ruleName);
      const docComment = createRuleDoc(rule.meta.docs);

      let code: string;
      if (
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types aren't strictly correct
        rule.meta?.schema == null ||
        rule.meta.schema.length === 0
      ) {
        code = `${docComment}\nexport type ${typeName} = 'off' | ['warn' | 'error'];\n`;
      } else {
        const { schema } = rule.meta;
        let fixedSchema: JSONSchema.JSONSchema4;
        if (Array.isArray(schema)) {
          const schemaArray: ReadonlyArray<JSONSchema.JSONSchema4> = schema;
          schema.forEach(recursivelyFixRefs);
          fixedSchema = {
            type: 'array',
            items: [ruleLevelString, ...schemaArray],
            minItems: 1,
          };
        } else {
          fixedSchema = adjustSchema(schema);
        }

        const compiledCode = await compileSchema(typeName, fixedSchema);

        code = formatText(
          [compiledCode.defs, docComment, compiledCode.typeExport].join('\n')
        );
      }

      if (ruleName.includes('/')) {
        const ruleFolder = ruleName.substring(0, ruleName.lastIndexOf('/'));
        await mkdirp(path.join(folderName, ruleFolder));
      }

      const filename = path.resolve(folderName, `${ruleName}.ts`);
      config.writeFile(filename, [AUTO_GENERATED_NOTE, code].join('\n\n'));

      console.info('Wrote', path.relative(config.cwd, filename));
    })
  );
}
